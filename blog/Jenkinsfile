#!/usr/bin/env groovy

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Check Java') {
            steps {
                sh "java -version"
            }
        }

        stage('Clean') {
            steps {
                script {
                    dir('blog') {
                        timeout(time: 30, unit: 'MINUTES') {
                            sh "chmod +x mvnw"
                            sh "./mvnw -ntp clean -P-webapp"
                        }
                    }
                }
            }
        }

        stage('NoHTTP') {
            steps {
                script {
                    dir('blog') {
                        timeout(time: 20, unit: 'MINUTES') {
                            sh "./mvnw -ntp checkstyle:check"
                        }
                    }
                }
            }
        }

        stage('Install Tools') {
            steps {
                script {
                    dir('blog') {
                        timeout(time: 20, unit: 'MINUTES') {
                            sh "./mvnw -ntp com.github.eirslett:frontend-maven-plugin:install-node-and-npm@install-node-and-npm"
                        }
                    }
                }
            }
        }

        stage('NPM Install') {
            steps {
                script {
                    dir('blog') {
                        timeout(time: 20, unit: 'MINUTES') {
                            sh "./mvnw -ntp com.github.eirslett:frontend-maven-plugin:npm"
                        }
                    }
                }
            }
        }

        stage('Backend Tests') {
            steps {
                script {
                    dir('blog') {
                        try {
                            timeout(time: 30, unit: 'MINUTES') {
                                sh "./mvnw -ntp verify -P-webapp"
                            }
                        } catch (err) {
                            throw err
                        } finally {
                            junit '**/target/surefire-reports/TEST-*.xml,**/target/failsafe-reports/TEST-*.xml'
                        }
                    }
                }
            }
        }

      // stage('Frontend Tests') {
            //steps {
                //script {
                    //dir('blog') { 
                        //try {
                            // Instalaci√≥n de dependencias
                            //sh 'npm install'
                            
                            // Ejecutar tests de frontend
                            //sh 'npm run test -- --ci --reporters jest-junit --outputFile=TESTS-results-jest.xml'
                        //} catch (err) {
                            //throw err
                        //} finally {
                            // Publicar los resultados de los tests
                            //junit '**/TESTS-results-jest.xml'
                        //}
                    //}
                //}
            //}
        //}


        stage('Packaging') {
            steps {
                script {
                    dir('blog') {
                        timeout(time: 30, unit: 'MINUTES') {
                            sh "./mvnw -ntp verify -P-webapp -Pprod -DskipTests"
                            archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                        }
                    }
                }
            }
        }

        
    def dockerImage
    stage('publish docker') {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-login', passwordVariable: 'DOCKER_REGISTRY_PWD', usernameVariable: 'DOCKER_REGISTRY_USER')]) {
            sh "./mvnw -ntp jib:build"
        }
    }
    }
}
